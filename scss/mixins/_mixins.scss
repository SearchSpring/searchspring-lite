@import '._variables.scss';

// Import icon mixins
// Icons should be imported before other mixins that use them, like checkboxes
@import '_icons.scss';

// Animate
// Example for $value: ss-spin 2s infinite linear
@mixin animate($value) {
	-webkit-animation: $value;
	-moz-animation: $value;
	-ms-animation: $value;
	-o-animation: $value;
	animation: $value;
}

// Animate - Spin
// Example: use when animating icons with the animate mixin (check out infinite module)
@mixin animate-spin {
	@keyframes ss-spin {
		0% {
			@include transform(rotate(0deg));
		}
		to {
			@include transform(rotate(1turn));
		}
	}
}

// Border radius with browser prefixes
@mixin border-radius($size) {
	-webkit-border-radius: $size;
	-moz-border-radius: $size;
	-ms-border-radius: $size;
	-o-border-radius: $size;
	border-radius: $size;
}

// Box shadow with browser prefixes
@mixin box-shadow ($size, $color) {
	-webkit-box-shadow: $size $color;
	-moz-box-shadow: $size $color;
	box-shadow: $size $color;
}

// Box sizing with browser prefixes
@mixin box-sizing {
	-webkit-box-sizing: border-box;
	-moz-box-sizing: border-box;
	box-sizing: border-box;
}

// Clearfix
@mixin clearfix($selector) {
	#{$selector}:before, #{$selector}:after {
		content: '';
		display: table;
	}
	#{$selector}:after {
		clear: both;
		zoom: 1;
	}
}

// Center images
@mixin center-image {
	max-width: 100%;
	max-height: 100%;
	@include sizing(auto, auto);
	border: 0;
	margin: auto;
	display: block;
	@include position($type: absolute, $top: 0, $bottom: 0, $right: 0, $left: 0);
}

// Common border formatting
@mixin format-border($color: '', $border: '') {
	@if nth($border, 1) != '' {
		$bcolor: #000000;
		@if $color != '' {
			$bcolor: $color;
		}
		$side: nth($border, 1);
		$size: 1px;
		@if nth($border, 2) != '' {
			$size: nth($border, 2);
		}
		$style: solid;
		@if nth($border, 3) != '' {
			$style: unquote(nth($border, 3));
		}
		#{$side}: $size $style $bcolor;
	}
	@if nth($border, 4) != '' {
		@include border-radius(nth($border, 4));
	}
}

// Common spacing formatting
@mixin format-spacing($spacing: '') {
	@if nth($spacing, 1) != '' {
		margin: nth($spacing, 1);
	}
	@if nth($spacing, 2) != '' {
		padding: nth($spacing, 2);
	}
}

// Common font formatting
@mixin format-text($color: '', $font: '') {
	@if $color != '' {
		color: $color;
	}
	@if nth($font, 1) != '' {
		@if type-of(nth($font, 1)) == number {
			font-size: nth($font, 1);
		} @else {
			font-size: unquote(nth($font, 1));
		}
	}
	@if nth($font, 2) != '' {
		font-family: unquote(nth($font, 2));
	}
	@if nth($font, 3) != '' {
		@if type-of(nth($font, 3)) == number {
			font-weight: nth($font, 3);
		} @else {
			font-weight: unquote(nth($font, 3));
		}
	}
	@if nth($font, 4) != '' {
		font-style: unquote(nth($font, 4));
	}
	@if nth($font, 5) != '' {
		text-transform: unquote(nth($font, 5));
	}
}

// Gradient - three stripes
@mixin gradient-three($fb, $c1, $c2, $c3) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: -moz-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: -o-linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
	background-image: linear-gradient($c1 33.33%, $c2 33.33%, $c2 66.66%, $c3 66.66%, $c3);
}

// Gradient - four stripes
@mixin gradient-four($fb, $c1, $c2, $c3, $c4) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: -moz-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: -o-linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
	background-image: linear-gradient($c1 25%, $c2 25%, $c2 50%, $c3 50%, $c3 75%, $c4 75%, $c4);
}

// Gradient - five stripes
@mixin gradient-five($fb, $c1, $c2, $c3, $c4, $c5) {
	background-color: $fb;
	background-image: -webkit-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: -moz-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: -o-linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
	background-image: linear-gradient($c1 20%, $c2 20%, $c2 40%, $c3 40%, $c3 60%, $c4 60%, $c4 80%, $c5 80%, $c5);
}

// Set grid parent rules
@mixin grid-parent($gutter, $type: '', $margin: '') {
	// Sometimes we want different margins
	@if $margin == false {
		margin: 0 (-$gutter);
	} @elseif $margin != '' {
		margin: 0 (-$gutter) (-$margin) (-$gutter);
	} @else {
		margin: 0 (-$gutter) (-$gutter * 2) (-$gutter);
	}
	@if $type == float {
		@include clearfix('&');
		& + * {
			clear: both;
		}
	}
}

// Set grid child rules
@mixin grid-child($gutter, $type: '', $margin: '') {
	// Sometimes we want different margins
	@if $margin == false {
	} @elseif $margin != '' {
		margin: 0 0 $margin 0;
	} @else {
		margin: 0 0 ($gutter * 2) 0;
	}
	padding: 0 $gutter;
	@if $type == false {
	} @elseif $type == float {
		float: left;
	} @else {
		@include inline-block(top);
	}
}

// Inline block with vertical alignment
@mixin inline-block($vertical-align) {
	display: inline-block;
	zoom: 1;
	*display: inline;
	vertical-align: $vertical-align;
}

// Placeholder
// Examples: @include placeholder {}, :focus{@include placeholder {}}, or input {@include placeholder {}}
@mixin placeholder {
	&::-webkit-input-placeholder {@content}
	&:-moz-placeholder           {@content}
	&::-moz-placeholder          {@content}
	&:-ms-input-placeholder      {@content}
}

// Mixin for positioning
@mixin position($type: '', $top: '', $bottom: '', $left: '', $right: '', $z: '') {
	@if ($type != '') {
		position: $type;
	}
	@if ($top != '') {
		top: $top;
	}
	@if ($bottom != '') {
		bottom: $bottom;
	}
	@if ($left != '') {
		left: $left;
	}
	@if ($right != '') {
		right: $right;
	}
	@if ($z != '') {
		z-index: $z;
	}
}

// General reset - no margin or padding
@mixin reset {
	margin: 0;
	padding: 0;
}

// Responsive px breakpoint, pass in a pixel value
@mixin respond($breakpoint) {
	@if index('px' 'cm' 'mm' 'in' 'pt' 'pc' 'dpi' 'dpcm' 'dppx' 'em' 'ex' 'rem' '%' 'vw' 'vh' 'vmin' 'vmax', unit($breakpoint)) == null {
		$breakpoint: $breakpoint + 'px';
	}
	@media only screen and (max-width: $breakpoint) {
		@content;
	}
}

// Quick width and height sizing
@mixin sizing($width, $height) {
	width: $width;
	height: $height;
}

// Transform
@mixin transform($value) {
	-webkit-transform: $value;
	-moz-transform: $value;
	-ms-transform: $value;
	-o-transform: $value;
	transform: $value;
}

// Transition
@mixin transition($value) {
	-webkit-transition: $value;
	-moz-transition: $value;
	-ms-transition: $value;
	-o-transition: $value;
	transition: $value;
}

// ---- FUNCTIONS

// Get border total size
@function get-border-size($border, $type: '') {
	@if nth($border, 1) != '' {
		$size: 1px;
		@if nth($border, 2) != '' {
			$size: nth($border, 2);
		}
		@if nth($border, 1) == border {
			@if $type == half {
				@return $size * 1;
			} @else {
				@return $size * 2;
			}
		} @else {
			@return $size * 1;
		}
	} @else {
		@return 0;
	}
}

// Check if number is fluid or fixed (mostly for image sizing)
@function check-number($number) {
	@if type-of($number) == number {
		@if unit($number) == % or unit($number) == em or unit($number) == rem {
			@return fluid;
		} @else {
			@return fixed;
		}
	} @else {
		@return false;
	}
}
